/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import practica1hja.modelo.Card;
import practica1hja.modelo.Hand;
import practica1hja.modelo.HandEvaluator;
import practica1hja.modelo.IteradorCombinacion;

/**
 *
 * @author jcarlos
 */
public class VentanaGrafica extends javax.swing.JFrame {

    /**
     * Creates new form Practica1HJA
     */
    public VentanaGrafica() {
        initComponents();
        String[] date = new String[4];
        for (int i = 1; i < 5; i++) {
            date[i - 1] = "Apartado " + i;
        }

        comboApartado.setModel(new javax.swing.DefaultComboBoxModel(date));
        textArea.setFont(new java.awt.Font("Arial", 1, 14));
/*
    drawCard("2_of_clubs.png", c11);
    drawCard("2_of_clubs.png", c12);
    drawCard("cartasPNG/3_of_clubs.png", c13);
    drawCard("cartasPNG/4_of_clubs.png", c14);*/
    /*
         c11.setIcon(newIcon);
         c12.setIcon(newIcon);
         c31.setIcon(newIcon);
         c32.setIcon(newIcon);
         cb1.setIcon(newIcon);
         cb2.setIcon(newIcon);
         cb3.setIcon(newIcon);
         cb4.setIcon(newIcon);
         cb5.setIcon(newIcon);
         */
    }

    public void setLinea(String linea) {
        this.textLinea.setText(linea);
    }

    private void drawCard(String path, JLabel label) {
        ImageIcon icon = new ImageIcon(path);
        Image img = icon.getImage();
        BufferedImage bi = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);
        Graphics g = bi.createGraphics();
        int scale = 8;
        int width = icon.getIconWidth() / scale;
        int height = icon.getIconHeight() / scale;
        g.drawImage(img, 0, 0, width, height, null);
        ImageIcon newIcon = new ImageIcon(bi);
        label.setIcon(newIcon);
    }
    
    private void cleanTable(){
        cb1.setIcon(null);
        cb2.setIcon(null);
        cb3.setIcon(null);
        cb4.setIcon(null);
        cb5.setIcon(null);
        c11.setIcon(null);
        c12.setIcon(null);
        c13.setIcon(null);
        c14.setIcon(null);
        c21.setIcon(null);
        c22.setIcon(null);
        c31.setIcon(null);
        c32.setIcon(null);
        c41.setIcon(null);
        c42.setIcon(null);
        c51.setIcon(null);
        c52.setIcon(null);
        c61.setIcon(null);
        c62.setIcon(null);
        c71.setIcon(null);
        c72.setIcon(null);
        c81.setIcon(null);
        c82.setIcon(null);
        c91.setIcon(null);
        c92.setIcon(null);
        this.textArea.setText("");
        this.textLinea.setText("");
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        c11 = new javax.swing.JLabel();
        c12 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        c21 = new javax.swing.JLabel();
        c22 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        c31 = new javax.swing.JLabel();
        c32 = new javax.swing.JLabel();
        board = new javax.swing.JLabel();
        cb1 = new javax.swing.JLabel();
        cb2 = new javax.swing.JLabel();
        cb3 = new javax.swing.JLabel();
        cb4 = new javax.swing.JLabel();
        cb5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        c41 = new javax.swing.JLabel();
        c42 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        c51 = new javax.swing.JLabel();
        c52 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        c61 = new javax.swing.JLabel();
        c62 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        c92 = new javax.swing.JLabel();
        c91 = new javax.swing.JLabel();
        c82 = new javax.swing.JLabel();
        c81 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        c72 = new javax.swing.JLabel();
        c71 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        c13 = new javax.swing.JLabel();
        c14 = new javax.swing.JLabel();
        comboApartado = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        botonResultado = new javax.swing.JButton();
        botonSiguiente = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        textLinea = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        openItem = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        ExitItem = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Abrir archivo");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(113, 175, 83));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setText("Jugador 1:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, -1, -1));
        jPanel1.add(c11, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, -1));

        c12.setText(" ");
        jPanel1.add(c12, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, -1, -1));

        jLabel7.setText("Jugador 2:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 140, -1, -1));

        c21.setText(" ");
        jPanel1.add(c21, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, -1, -1));

        c22.setText(" ");
        jPanel1.add(c22, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 160, -1, -1));

        jLabel9.setText("Jugador 3:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 260, -1, -1));

        c31.setText(" ");
        jPanel1.add(c31, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, -1, -1));

        c32.setText(" ");
        jPanel1.add(c32, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 280, -1, -1));

        board.setText("Board:");
        jPanel1.add(board, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 440, -1, -1));

        cb1.setText(" ");
        jPanel1.add(cb1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 390, -1, -1));

        cb2.setText(" ");
        jPanel1.add(cb2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 390, -1, -1));

        cb3.setText(" ");
        jPanel1.add(cb3, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 390, -1, -1));

        cb4.setText(" ");
        jPanel1.add(cb4, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 390, -1, -1));

        cb5.setText(" ");
        jPanel1.add(cb5, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 390, -1, -1));

        jLabel6.setText("Jugador 4:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 20, -1, -1));
        jPanel1.add(c41, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, -1, -1));

        c42.setText(" ");
        jPanel1.add(c42, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 40, -1, -1));

        jLabel8.setText("Jugador 5:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 140, -1, -1));

        c51.setText(" ");
        jPanel1.add(c51, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 160, -1, -1));

        c52.setText(" ");
        jPanel1.add(c52, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 160, -1, -1));

        jLabel10.setText("Jugador 6:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 260, -1, -1));

        c61.setText(" ");
        jPanel1.add(c61, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 280, -1, -1));

        c62.setText(" ");
        jPanel1.add(c62, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 280, -1, -1));

        jLabel11.setText("Jugador 9:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 260, -1, -1));

        c92.setText(" ");
        jPanel1.add(c92, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 280, -1, -1));

        c91.setText("  ");
        jPanel1.add(c91, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 280, -1, -1));

        c82.setText(" ");
        jPanel1.add(c82, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 160, -1, -1));

        c81.setText(" ");
        jPanel1.add(c81, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 160, -1, -1));

        jLabel12.setText("Jugador 8:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 140, -1, -1));

        c72.setText(" ");
        jPanel1.add(c72, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 40, -1, -1));
        jPanel1.add(c71, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 40, -1, -1));

        jLabel13.setText("Jugador 7:");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 20, -1, -1));

        c13.setText(" ");
        jPanel1.add(c13, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 40, 70, -1));

        c14.setText(" ");
        jPanel1.add(c14, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 40, 70, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 970, 530));

        comboApartado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboApartado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboApartadoActionPerformed(evt);
            }
        });
        getContentPane().add(comboApartado, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 200, -1));

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(482, 30, 490, 110));

        jLabel1.setText("Apartado: ");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, -1, 30));

        jLabel2.setText("Output:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 0, -1, 30));

        botonResultado.setText("Resultado");
        botonResultado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonResultadoActionPerformed(evt);
            }
        });
        getContentPane().add(botonResultado, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        botonSiguiente.setText("Siguiente");
        botonSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSiguienteActionPerformed(evt);
            }
        });
        getContentPane().add(botonSiguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 110, -1, -1));

        jLabel3.setText("Linea:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 68, -1, 30));

        textLinea.setText(" ");
        getContentPane().add(textLinea, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, 400, 30));

        openItem.setText("File");

        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        openItem.add(jMenuItem1);

        ExitItem.setText("Exit");
        ExitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitItemActionPerformed(evt);
            }
        });
        openItem.add(ExitItem);

        jMenuBar1.add(openItem);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboApartadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboApartadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboApartadoActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            entrada = file;

            if(null != fr)
                try {
                    fr.close();
            } catch (IOException ex) {
                Logger.getLogger(VentanaGrafica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            entrada = file;
            try {
                fr = new FileReader(entrada);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(VentanaGrafica.class.getName()).log(Level.SEVERE, null, ex);
            }
            br = new BufferedReader(fr);

            try {
                // What to do with the file, e.g. display it in a TextArea
                switch (comboApartado.getSelectedIndex()) {
                    case 0:
                        this.apartado = 1;
                        cleanTable();
                        leerLinea1();
                        break;
                    case 1:
                        this.apartado = 2;
                        cleanTable();
                        leerLinea2();
                        break;
                    case 2:
                        this.apartado = 3;
                        cleanTable();
                        leerLinea3();                        
                        break;
                    case 3:
                        this.apartado = 4;
                        cleanTable();
                        leerLinea4();
                        break;
                    default:
                        JOptionPane.showMessageDialog(null, "Selecciona un apartado");
                }
            } catch (IOException ex) {
                Logger.getLogger(VentanaGrafica.class.getName()).log(Level.SEVERE, null, ex);
            }
            //textArea.read(new FileReader(file.getAbsolutePath()), null);

        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void leerLinea4() throws IOException {

        String linea = br.readLine();
        if (linea != null) {
            cleanTable();
            this.textLinea.setText(linea);
            int nBoard = Character.getNumericValue(linea.charAt(9));
            int posicion = 0;
            Hand handPlayer = new Hand();
            int cont = 0;
            for (int i = 0; i < 4; i++) {
                Card card = new Card(linea.substring(posicion, posicion + 1).toUpperCase(),
                        linea.substring(posicion + 1, posicion + 2));
                handPlayer.aniadeCarta(card);
                posicion += 2;
                switch(cont){
                    case 0:drawCard(card.getPath(), c11);
                        break;
                    case 1:drawCard(card.getPath(), c12);
                        break;
                    case 2:drawCard(card.getPath(), c13);
                        break;
                    case 3:drawCard(card.getPath(), c14);
                        break;
                }
                cont++;
            }
            cont = 0;
            posicion = 11;
            Hand Board = new Hand();
            for (int i = 0; i < nBoard; i++) {
                Card card = new Card(linea.substring(posicion, posicion + 1).toUpperCase(),
                        linea.substring(posicion + 1, posicion + 2));
                Board.aniadeCarta(card);
                posicion += 2;
                 switch(cont){
                    case 0:drawCard(card.getPath(), cb1);
                        break;
                    case 1:drawCard(card.getPath(), cb2);
                        break;
                    case 2:drawCard(card.getPath(), cb3);
                        break;
                    case 3:drawCard(card.getPath(), cb4);
                        break;
                    case 4:drawCard(card.getPath(), cb5);
                        break;
                }
                cont++;

            }

            IteradorCombinacion it = new IteradorCombinacion(handPlayer.getHand(), 2);
            Iterator sPlayer = it.iterator();
            ArrayList PlayerCombinations = new ArrayList();

            while (sPlayer.hasNext()) {

                List<Object> listaresPlayer = (List<Object>) sPlayer.next();
                PlayerCombinations.add(listaresPlayer);

            }

            IteradorCombinacion itBoard = new IteradorCombinacion(Board.getHand(), 3);
            Iterator sBoard = itBoard.iterator();
            ArrayList BoardCombinations = new ArrayList();

            while (sBoard.hasNext()) {

                List<Object> listaresBoard = (List<Object>) sBoard.next();
                BoardCombinations.add(listaresBoard);

            }

            HandEvaluator mejorOmaha = null;

            for (Object PlayerCombination : PlayerCombinations) {
                Hand actualPlayer = new Hand();
                List<Card> dosPlayer = (LinkedList) PlayerCombination;
                for (Card c : dosPlayer) {
                    actualPlayer.aniadeCarta(c);
                }
                for (Object BoardCombination : BoardCombinations) {
                    List<Card> tresBoard = (LinkedList) BoardCombination;
                    Hand h = new Hand();
                    for (Card c : actualPlayer.getHand()) {
                        h.aniadeCarta(c);
                    }

                    for (Card c : tresBoard) {
                        h.aniadeCarta(c);
                    }
                    h.sort();
                    HandEvaluator heOmaha = new HandEvaluator(h.getHand());
                    if (mejorOmaha != null) {
                        if (heOmaha.compareTo(mejorOmaha) > 0) {
                            mejorOmaha = heOmaha;
                        }
                    } else {
                        mejorOmaha = heOmaha;
                    }
                }
            }
            omaha = mejorOmaha;

        }else
            JOptionPane.showMessageDialog(null, "No hay más manos que analizar.");
    }
    
    private void leerLinea3() throws IOException {
        String linea = br.readLine();
        
        if(linea!=null){
            cleanTable();
            this.textLinea.setText(linea);
            ArrayList<Hand> hands = new ArrayList<>();
            hes= new ArrayList<>();
            ids = new ArrayList<>();   
                int nPlayers = Character.getNumericValue(linea.charAt(0));
                int posicion = 2;
                int cont = 1;
                for(int i = 0; i < nPlayers; i++){
                    Hand hand = new Hand();
                    String id = linea.substring(posicion,posicion + 2);
                    posicion += 2;
                    for (int x = 0; x < 2; x++){
                        Card card = new Card(linea.substring(posicion, posicion + 1).toUpperCase(),
                                linea.substring(posicion + 1, posicion + 2));
                        hand.aniadeCarta(card);
                        posicion += 2;
                        switch(cont){
                            case 1:drawCard(card.getPath(), c11);
                                break;
                            case 2:drawCard(card.getPath(), c12);
                                break;
                            case 3:drawCard(card.getPath(), c21);
                                break;
                            case 4:drawCard(card.getPath(), c22);
                                break;
                            case 5:drawCard(card.getPath(), c31);
                                break;
                            case 6:drawCard(card.getPath(), c32);
                                break;
                            case 7:drawCard(card.getPath(), c41);
                                break;
                            case 8:drawCard(card.getPath(), c42);
                                break;
                            case 9:drawCard(card.getPath(), c51);
                                break;
                            case 10:drawCard(card.getPath(), c52);
                                break;
                            case 11:drawCard(card.getPath(), c61);
                                break;
                            case 12:drawCard(card.getPath(), c62);
                                break;
                            case 13:drawCard(card.getPath(), c71);
                                break;
                            case 14:drawCard(card.getPath(), c72);
                                break;
                            case 15:drawCard(card.getPath(), c81);
                                break;
                            case 16:drawCard(card.getPath(), c82);
                                break;
                            case 17:drawCard(card.getPath(), c91);
                                break;
                            case 18:drawCard(card.getPath(), c92);
                                break;
                        }
                        cont++;
                    }
                    
                    hands.add(hand);
                    ids.add(id);
                    posicion ++;
                }
                for(int i = 0; i < 5; i++){
                    Card card = new Card(linea.substring(posicion, posicion + 1).toUpperCase(),
                                linea.substring(posicion + 1, posicion + 2));
                    for(Hand h : hands)
                        h.aniadeCarta(card);
                    posicion += 2;
                    switch(i){
                        case 0:drawCard(card.getPath(), cb1);
                            break;
                        case 1:drawCard(card.getPath(), cb2);
                            break;
                        case 2:drawCard(card.getPath(), cb3);
                            break;
                        case 3:drawCard(card.getPath(), cb4);
                            break;
                        case 4:drawCard(card.getPath(), cb5);
                            break;
                    }
                    
                }
                int idPos = 0;
                for(Hand h : hands){
                    h.sort();
                    hes.add(new HandEvaluator(h.getHand(),ids.get(idPos) ));
                    idPos++;
                }
                
                Collections.sort(hes);
                
        }else
            JOptionPane.showMessageDialog(null, "No hay más manos que analizar.");
    }
    
    private void leerLinea2() throws IOException {

        String linea = br.readLine();
        if (linea != null) {
            cleanTable();
            this.textLinea.setText(linea);
            int nBoard = Character.getNumericValue(linea.charAt(5));
            int posicion = 0;
            Hand hand = new Hand();
            int cont = 0;
            for (int i = 0; i < 2; i++) {
                Card card = new Card(linea.substring(posicion, posicion + 1).toUpperCase(),
                        linea.substring(posicion + 1, posicion + 2));
                hand.aniadeCarta(card);
                posicion += 2;
                if (cont == 0) {
                    drawCard(card.getPath(), c11);
                } else {
                    drawCard(card.getPath(), c12);
                }
                cont++;
            }
            posicion = 7;
            cont = 0;

            for (int i = 0; i < nBoard; i++) {
                Card card = new Card(linea.substring(posicion, posicion + 1).toUpperCase(),
                        linea.substring(posicion + 1, posicion + 2));
                hand.aniadeCarta(card);
                posicion += 2;
                switch (cont) {
                    case 0:
                        drawCard(card.getPath(), cb1);
                        break;
                    case 1:
                        drawCard(card.getPath(), cb2);
                        break;
                    case 2:
                        drawCard(card.getPath(), cb3);
                        break;
                    case 3:
                        drawCard(card.getPath(), cb4);
                        break;
                    case 4:
                        drawCard(card.getPath(), cb5);
                        break;
                }
                cont++;

            }
            hand.sort();
            he = new HandEvaluator(hand.getHand());
        }else
            JOptionPane.showMessageDialog(null, "No hay más manos que analizar.");

    }

    private void leerLinea1() throws IOException {
       
        String linea = br.readLine();
        if (linea != null) {
            cleanTable();
            Hand hand = new Hand();
            int x = 0;
            for (int i = 0; i < linea.length(); i += 2) {
                Card card = new Card(linea.substring(i, i + 1),
                        linea.substring(i + 1, i + 2));
                hand.aniadeCarta(card);
                switch (x) {
                    case 0:
                        drawCard(card.getPath(), c11);
                        break;
                    case 1:
                        drawCard(card.getPath(), c12);
                        break;
                    case 2:
                        drawCard(card.getPath(), cb1);
                        break;
                    case 3:
                        drawCard(card.getPath(), cb2);
                        break;
                    case 4:
                        drawCard(card.getPath(), cb3);
                        break;
                }
                x++;
            }

            hand.sort();
            he = new HandEvaluator(hand.getHand());

            textLinea.setText(linea);
        }else
            JOptionPane.showMessageDialog(null, "No hay más manos que analizar.");

    }

    private void ExitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitItemActionPerformed

    private void botonSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSiguienteActionPerformed
        try {
            switch(this.apartado){
            
                case 1:
                    leerLinea1();
                    break;
                case 2:
                    leerLinea2();
                    break;
                case 3:
                    leerLinea3();
                    break;
                case 4:
                    leerLinea4();
                    break;
            }
        } catch (IOException ex) {
            Logger.getLogger(VentanaGrafica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonSiguienteActionPerformed

    private void botonResultadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonResultadoActionPerformed
        if(this.apartado==1||this.apartado==2){
            if (he != null) {
                String draws = new String();
                String output;
                Collections.sort(he.getKicker());
                if (he.getKicker().size() > 0 && he.getKicker().get(0).getValue() == 1) {
                    he.getKicker().add(he.getKicker().remove(0));
                }

                for (String s : he.getDraw()) {
                    draws += "-Draw: " + s + "\n";
                }

                output = "-Best Hand: " + he.getJugada();
                if (!he.getCartasJugada().isEmpty()) {
                    output += " with " + he.getCartasJugada().toString();
                }
                if (!he.getKicker().isEmpty()) {
                    int kicker = 5 - he.getCartasJugada().size();
                    while (he.getKicker().size() > kicker) {
                        he.limpiarKicker();
                    }
                    output += " and " + he.getKicker().toString() + " Kicker";
                }
                output += "\n\n" + draws;
                textArea.setText(output);
            }
        } else if (this.apartado == 3) {
            
            String orden = new String();
            int cont = 1;
            for (int i = hes.size(); i > 0; i--) {
                orden = orden + cont + "º "+ hes.get(i - 1).toString() + "\n";
                cont++;
            }
            this.textArea.setText(orden);
        } else if(this.apartado == 4){
            String draws = new String();

            Collections.sort(omaha.getKicker());
            if (omaha.getKicker().size() > 0 && omaha.getKicker().get(0).getValue() == 1) {
                omaha.getKicker().add(omaha.getKicker().remove(0));
            }

            for (String s : omaha.getDraw()) {
                draws += "\t-Draw: " + s + "\n";
            }
            String salidaOmaha = new String();
            salidaOmaha += "-Best Hand: " + omaha.getJugada();
            if (!omaha.getCartasJugada().isEmpty()) {
               salidaOmaha += " with " + omaha.getCartasJugada().toString();
            }
            if (!omaha.getKicker().isEmpty()) {
                int kicker = 5 - omaha.getCartasJugada().size();
                while (omaha.getKicker().size() > kicker) {
                    omaha.limpiarKicker();
                }
                salidaOmaha += " and " + omaha.getKicker().toString() + " Kicker";
            }
            salidaOmaha += "\n" + draws;
            this.textArea.setText(salidaOmaha);
        }
    }//GEN-LAST:event_botonResultadoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ExitItem;
    private javax.swing.JLabel board;
    private javax.swing.JButton botonResultado;
    private javax.swing.JButton botonSiguiente;
    private javax.swing.JLabel c11;
    private javax.swing.JLabel c12;
    private javax.swing.JLabel c13;
    private javax.swing.JLabel c14;
    private javax.swing.JLabel c21;
    private javax.swing.JLabel c22;
    private javax.swing.JLabel c31;
    private javax.swing.JLabel c32;
    private javax.swing.JLabel c41;
    private javax.swing.JLabel c42;
    private javax.swing.JLabel c51;
    private javax.swing.JLabel c52;
    private javax.swing.JLabel c61;
    private javax.swing.JLabel c62;
    private javax.swing.JLabel c71;
    private javax.swing.JLabel c72;
    private javax.swing.JLabel c81;
    private javax.swing.JLabel c82;
    private javax.swing.JLabel c91;
    private javax.swing.JLabel c92;
    private javax.swing.JLabel cb1;
    private javax.swing.JLabel cb2;
    private javax.swing.JLabel cb3;
    private javax.swing.JLabel cb4;
    private javax.swing.JLabel cb5;
    private javax.swing.JComboBox comboApartado;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu openItem;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField textLinea;
    // End of variables declaration//GEN-END:variables
    private File entrada;
    private File salida;

    private FileReader fr = null;
    private BufferedReader br = null;
    private int apartado;
    private HandEvaluator he;
    private ArrayList<HandEvaluator> hes;
    private ArrayList<String> ids;
    private HandEvaluator omaha;

   
    

}
